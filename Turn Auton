/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
#include "okapi/api.hpp"
using namespace okapi;
pros::Motor launcher(4,5);
pros::Motor intake(8);
okapi:: MotorGroup right({11, 20});
okapi:: MotorGroup left({1, 10});
pros::Controller master(pros::E_CONTROLLER_MASTER);

const auto WHEEL_DIAMETER = 4.25_in;
const auto CHASSIS_WIDTH = 13.5_in;

auto chassis = ChassisControllerFactory::create(
  left, right,
  AbstractMotor::gearset::green,
  {WHEEL_DIAMETER, CHASSIS_WIDTH}
);


//---------------------------Intake-------------------------------------------//

/*
void intake(double msec){
intake.moveVelocity(200);
delay(msec);
intake.moveVelocity(0);
}
*/


//------------------------accelerateDrive-------------------------------------//

/*
float speedChangePerLoop = 0.06;
float leftPower = 0, rightPower = 0;
void accelerateDrive(int leftTargetPower, int rightTargetPower)
{
	if(leftTargetPower < leftPower)
	{
		leftPower -= speedChangePerLoop;
    chassis.setMaxVelocity(leftPower);
	}
	else if(leftTargetPower > leftPower)
	{
		leftPower += speedChangePerLoop;
    chassis.setMaxVelocity(leftPower);
	}
	else{}
	if(rightTargetPower < rightPower)
	{
		rightPower -= speedChangePerLoop;
    chassis.setMaxVelocity(rightPower);
	}
	else if(rightTargetPower > rightPower)
	{
		rightPower += speedChangePerLoop;
    chassis.setMaxVelocity(rightPower);
	}
	else{}
}
*/



//-------------------------------------First PID------------------------------//
//auto PID = IterativePosPIDController::create(double ikP, double ikI, double ikD);

void autoPID(double target){

  int kP = 0.0;
  int kI = 0.0;
  int kD = 0.0;

  double RsenReading = right.getPosition();
  double LsenReading = left.getPosition();

  while (target != RsenReading && target != LsenReading )
  {
    double R_error = target - RsenReading;
    double R_integral = R_integral + R_error;

    double L_error = target - LsenReading;
    double L_integral = L_integral + L_error;

    if (R_error == 0)
    {
      R_integral = 0;
    }
    if ( abs(R_error) > 40)
    {
      R_integral = 0;
    }

    if (L_error == 0)
    {
      L_integral = 0;
    }
    if ( abs(L_error) > 40)
    {
      L_integral = 0;
    }

    double L_previous_error;
    double L_derivative = L_error - L_previous_error;
    L_previous_error = L_error;
    double L_speed = kP*L_error + kI*L_integral + kD*L_derivative;

    double R_previous_error;
    double R_derivative = R_error - R_previous_error;
    R_previous_error = R_error;
    double R_speed = kP*R_error + kI*R_integral + kD*R_derivative;

    left.moveVoltage(L_speed);
    right.moveVoltage(R_speed);
  }
}
//--------------------------------Second PID----------------------------------//
void PID(int goal) {
  int error = goal;
  float kP = 1;
  float kI = 1.5;
  float kD = 1;
  float errorTotal = 0;
  int lastError = error;
  int dError = 1000;

      while (abs(error) > 5) {
          double RsenReading = right.getPosition();
      //    double LsenReading = mleft.get_position();
      //    double senReading = (RsenReading + LsenReading) / 2;
          error = goal - RsenReading;
          dError = lastError - error;
          lastError = error;
          errorTotal += error/(5*10^6);

          if(abs(error) < 360){
              errorTotal = 0;
          }

          int powerLeft = kP * error + kI * errorTotal + kD *dError;
          int powerRight = kP * error + kI * errorTotal + kD *dError;
          left.moveVelocity(powerLeft);
          right.moveVelocity(powerRight);

          //printf("%d %d %d", error, mright.get_position(), powerRight);
          pros::lcd::print(0, "%d %d %d", error, right.getPosition(), powerRight);

          pros::c::delay(25);
      }

      //OPControl stuff??
      /*
      aleft = master.get_analog(ANALOG_LEFT_Y);
      mleft = master.get_analog(ANALOG_LEFT_Y);
      aright = master.get_analog(ANALOG_RIGHT_Y);
      mright = master.get_analog(ANALOG_RIGHT_Y);
      */


  }



//----------------------------------Gyro--------------------------------------//
pros::ADIGyro Gyro(1, .95);

void turn(int degrees)
  {
    float kI = .40;
    int errorTotal = 0;
    int error = degrees;

    while(abs(error) > 15)
      {
        switch(degrees){
          case 900:
          {
            double power = (-.00011111111*pow(Gyro.get_value(), 2) + .08333333333*(Gyro.get_value()) + 15);
            left.moveVelocity(power + kI * errorTotal);
            right.moveVelocity(-power  - kI * errorTotal);

            error = degrees - Gyro.get_value();
            errorTotal += error / (5*10^6);

            if(abs(error) > 50)
              errorTotal = 0;

            pros::lcd::print(0, "%d", Gyro.get_value());

            break;
          }

          case 1800:
          {
            double power = (-.00004012346*pow(Gyro.get_value(), 2) + .0638888888*(Gyro.get_value()) + 15);
            left.moveVelocity(power  + kI * errorTotal);
            right.moveVelocity(-power  - kI * errorTotal);

            error = degrees - Gyro.get_value();
            errorTotal += error / (5*10^6);

            if(abs(error) > 50)
              errorTotal = 0;

            break;
          }

          case -900:
          {
            double power = (-.00011111111*pow(Gyro.get_value(), 2) + .08333333333*(Gyro.get_value()) + 15);
            left.moveVelocity(-power - kI * errorTotal);
            right.moveVelocity(power + kI * errorTotal);

            error = degrees - Gyro.get_value();
            errorTotal += error / (5*10^6);

            if(abs(error) > 50)
              errorTotal = 0;

            break;
          }
          default:
            break;
        }

      }
      errorTotal = 0;
      left.moveVelocity(0);
      right.moveVelocity(0);
      Gyro.reset();
  }

void autonomous() {
  right.setReversed(true);
  right.getPosition();
  //turn(-900);
//___int_least16_t_defined  turn(1800);
  turn(900);
  pros::delay(5000);
  turn(900);
  /*chassis.moveDistance(1_ft);
  chassis.setMaxVelocity(125);
  chassis.moveDistance(1_ft); //moves in position to shoot
  intake = -75;
  pros::delay(500);
  intake = 0;
  chassis.moveDistance(2.6_ft); //moves forward to hit the bottom flag
  chassis.moveDistance(-3.6_ft); //moves backward to the starting position
  chassis.turnAngle(-90_deg); //turns toward the cap
  intake = 100;
  pros::delay(1000);
  chassis.moveDistance(2.6_ft); //move forward to take the ball
  */
}
